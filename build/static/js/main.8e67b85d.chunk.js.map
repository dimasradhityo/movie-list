{"version":3,"sources":["component/Table.js","App.js","utils/api.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","App","useState","setData","useEffect","a","fetch","method","body","JSON","stringify","query","then","res","json","result","response","fetchData","useMemo","Header","accessor","movies","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"yQAEO,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAC/B,EAMIC,mBAAS,CAAEF,UAASC,SALtBE,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,WAGF,OACE,qBAAKC,UAAU,eAAf,SACE,kDAAWL,KAAX,cACE,gCACGE,EAAaI,KAAI,SAACC,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,8CAAQA,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,wBAKxD,iDAAWX,KAAX,aACGE,EAAKG,KAAI,SAACO,EAAKC,GAEd,OADAV,EAAWS,GAET,8CAAQA,EAAIE,eAAZ,aACGF,EAAIG,MAAMV,KAAI,SAACW,GACd,OACE,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,6BC8B/CO,MAvDf,WACE,MAA0BC,mBAAS,MAAnC,mBAAQtB,EAAR,KAAcuB,EAAd,KAEAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sECRtBC,MAAM,WAAY,CACdC,OAAQ,OACRhB,QAAS,CACT,eAAgB,oBAEhBiB,KAAMC,KAAKC,UAAU,CACrBC,MAAM,oLAgBLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAYA,KDfA,OACZC,EADY,OAEhBb,EAAQa,GAFQ,2CAAH,qDAKfC,KAEC,IAIH,IAAMtC,EAAUuC,mBAAQ,iBAAK,CAC3B,CACEC,OAAO,YACPC,SAAU,MAEZ,CACED,OAAO,OACPC,SAAU,QAEZ,CACED,OAAO,QACPC,SAAU,SAEZ,CACED,OAAO,QACPxC,QAAS,CACP,CACEwC,OAAQ,WACRC,SAAS,YAEX,CACED,OAAQ,OACRC,SAAS,cAEX,CACED,OAAQ,MACRC,SAAS,kBAId,IACH,OACE,sBAAKjC,UAAU,MAAf,UACE,qEACS,MAARP,EAAe,4CAAuB,cAACF,EAAD,CAAOC,QAASA,EAASC,KAAMA,EAAKA,KAAKyC,aE1CvEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASpC,OACP,cAAC,IAAMqC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.8e67b85d.chunk.js","sourcesContent":["import { useTable } from \"react-table\";\r\n\r\nexport function Table({ columns, data }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n  } = useTable({ columns, data });\r\n\r\n  return (\r\n    <div className=\"table-simple\">\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}","import { useEffect, useMemo, useState } from 'react';\nimport './App.css';\nimport * as movieAPI from './utils/api'\nimport { Table } from './component/Table';\n\nfunction App() {\n  const [ data, setData ] = useState(null)\n\n  useEffect(() => {\n    const fetchData = async() => {\n      let response = await movieAPI.getData()\n      setData(response)\n\n    }\n    fetchData()\n    // console.log(data)\n  }, [])\n\n\n  \n  const columns = useMemo(() =>[\n    {\n      Header:'ID Movies',\n      accessor: 'id'\n    },\n    {\n      Header:'name',\n      accessor: 'name'\n    },\n    {\n      Header:'genre',\n      accessor: 'genre'\n    },\n    {\n      Header:'actor',\n      columns: [\n        {\n          Header: 'id Actor',\n          accessor:'actor.id'\n        },\n        {\n          Header: 'name',\n          accessor:'actor.name'\n        },\n        {\n          Header: 'age',\n          accessor:'actor.age'\n        },\n      ]\n    },\n  ], [])\n  return (\n    <div className=\"App\">\n      <h1>showing movie list with react-table</h1>\n      {data == null ? <div>Data Null</div> : <Table columns={columns} data={data.data.movies} />}\n      \n    </div>\n  );\n}\n\nexport default App;\n","export const getData = () =>\r\nfetch(\"/graphql\", {\r\n    method: \"POST\",\r\n    headers: {\r\n    \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n    query: `\r\n        {\r\n        movies{\r\n        id\r\n        name\r\n        genre\r\n        actor{\r\n            id\r\n            name\r\n            age\r\n        }\r\n        }\r\n      }\r\n    `,\r\n    })\r\n})\r\n    .then((res) => res.json())\r\n    .then((result) => result);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}